version: '3.3'
# to run this you need to create a .env file with the contents of .env.example
services:

  s3:
    image: minio/minio:RELEASE.2020-12-18T03-27-42Z
    container_name: s3
    restart: always
    hostname: s3
    volumes:
      - artifact-store:/data
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    networks:
      - load-forecasting-net
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 10s
      retries: 3

  create_bucket:
    image: minio/mc:RELEASE.2019-07-17T22-13-42Z
    depends_on:
      - s3    
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET__KEY: ${MINIO_SECRET_KEY}
    networks:
       - load-forecasting-net
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${BUCKET_NAME};
      /usr/bin/mc policy download s3/${BUCKET_NAME};
      /usr/bin/mc policy set public s3/${BUCKET_NAME};
      exit 0;
      '

  pgdb:
    container_name: pgdb
    restart: always
    image: inergy2020iccs/pgdb:0.1
    # volumes:
    #     - database:/var/lib/postgresql/data
    ports:
      - 5432:5432
    expose:
      - '5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - load-forecasting-net

  mlflow_server:
    restart: always
    image: inergy2020iccs/mlflow_server:0.1
    container_name: mlflow_server
    ports:
      - 5000:5000
    expose:
      - 5000
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      MLFLOW_S3_ENDPOINT_URL: http://s3:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    depends_on: 
      - s3
      - pgdb
    networks:
      - load-forecasting-net
    command: bash -c 
      "mlflow server --backend-store-uri postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgdb:5432/${POSTGRES_DATABASE} --host 0.0.0.0 --default-artifact-root s3://${BUCKET_NAME}/"

  backend:
    container_name: DeepTSF-backend
    hostname: DeepTSF-backend
    build: .
    restart: always
    ports:
      - '8080:8080'
    expose:
      - '8080'
    stdin_open: true
    environment:
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      USE_KEYCLOAK: ${USE_KEYCLOAK}
      GIT_PYTHON_REFRESH: ${GIT_PYTHON_REFRESH}
    # deploy: # activate this if you want gpu usage
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           capabilities: [gpu]
    networks:
       - load-forecasting-net

  dagster:
    container_name: DeepTSF--dagster-orchestrator
    hostname: DeepTSF--dagster-orchestrator
    build:
      context: .
      dockerfile: ./dagster-deeptsf/config/Dockerfile
    environment:
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    expose:
      - 8006
    ports:
      - 8006:8006
    volumes:
      - dagster-logs:/app/dagster-deeptsf
    networks:
      - load-forecasting-net

frontend:
    container_name: DeepTSF-dashboard
    hostname: DeepTSF-dashboard
    image: inergy2020iccs/deeptsf-dashboard:1.0
    restart: always
    build:
      context: ""
    ports:
      - 3000:3000
    stdin_open: true
    env:
      REACT_APP_AUTH: false
      REACT_APP_MLFLOW: ${MLFLOW_TRACKING_URI}
      CHOKIDAR_USEPOLLING: true
      REACT_APP_NAME: Load_Forecasting_Dashboard
    networks:
      - load-forecasting-net

volumes:
  database:
  artifact-store:
  dagster-logs: 

networks: 
  load-forecasting-net:
